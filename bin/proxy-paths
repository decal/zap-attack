#!/usr/bin/env ruby
# encoding: utf-8
#
# Traverse all known directories under web root in search of differing Server
# fields in the HTTP response header that would indicate configured proxy paths.
# Alternatively, cookie names can be used as the differentiating factor.
#

require 'zap_attack'
require 'dirverser'
require 'rest-client'
require 'uri'

# If this is true, use Server header--otherwise, use cookie names..
PROXY_SERVER_HEADER = true

include ZapAttack::API, Dirverser::URI

if ARGV.empty?
  STDERR.puts("\nusage: #{$0} HOST\n")
  STDERR.puts("  HOST  name of host to check for proxy paths\n\n")

  exit 1
end

host, locs, urls = ARGV.first.dup, Array.new, Urls.new

host.downcase!

urls.each do |u|
  begin
    auri = URI(u)
    ahst = auri.host

    ahst.downcase!

    next if !ahst.eql?(host)
  rescue Exception => e
    next
  end

  urlz = traverse(u, { :trail_slash => false } )

  urlz.each do |a|
    next if !a or a.empty?

    aslind = a.rindex('/')

    next if !aslind

    aprind = a[aslind .. -1].rindex('.')

    next if aprind

    aqmind = a.rindex('?')

    a = a[0 .. (aqmind - 1)] if aqmind

    locs << a
  end
end

locs.sort!
locs.uniq! 

srvs, thrs, amut = [], [], Mutex.new

locs.each do |l|
  thrs << Thread.new do
    if PROXY_SERVER_HEADER
      begin
        r = RestClient.get(l)

        h, x = r.headers, { :URL => l }

        h.merge!(x)

        amut.synchronize do
          srvs << h 
        end
      rescue Exception => e
        Thread.exit
      end
    else
      begin
        r = RestClient.get(l)

        c, x = r.cookies, {:URL => l }

        c.merge!(x)

        amut.synchronize do
          srvs << c
        end
      rescue Exception => e
        Thread.exit
      end
    end
  end
end

thrs.each do |t| 
  t.join 
end

if PROXY_SERVER_HEADER
  srvs.uniq! { |s| s[:server] }
else
  srvs.uniq! { |s| s.keys }
end

srvs.each do |z|
  if PROXY_SERVER_HEADER
    STDOUT.puts("#{z[:URL]} => #{z[:server]}")
  else
    STDOUT.puts("#{z[:URL]} => #{z}")
  end
end

exit 0
